Sub TwisterStringSort(sA() As String, ByVal lbA As Long, ByVal ubA As Long, Optional ByVal eOptimalA As eOptimal = RefreshUnsorted)
    Dim walk As Long, Find As Long, midd As Long
    Dim base As Long, ceil As Long, Item As String
    Dim cast As Long, mezz As Long, run As Long
    Dim lpStr As Long, lp As Long, lpB As Long
    Dim idx As Long, optimal As Long
    Dim eComp As eCompare
    walk = (ubA - lbA) + 1&                      ' Grab array item count
    If walk < 2& Then Exit Sub                   ' If nothing to do then exit
    eComp = SortOrder                            ' Initialize compare variable
    optimal = InitializeBuffers(walk, eOptimalA) ' Initialize working buffers
    lpStr = VarPtr(Item)                                          ' Cache pointer to the string variable
    lp = Sum(VarPtr(sA(lbA)), -(lbA * 4&))                        ' Cache pointer to the array
    lpB = VarPtr(TwisterBuf(0&))                                  ' Cache pointer to the buffer
    walk = lbA: mezz = ubA                                        ' Initialize our walker variables
    Do Until walk = mezz ' ----==============================---- ' Do the twist while there's more items
        walk = walk + 1&                                          ' Walk up the array and use binary search to insert each item down into the sorted lower array
        CopyMemByV lpStr, Sum(lp, walk * 4&), 4&                  ' Grab current value into item
        Find = walk                                               ' Default to current position
        ceil = walk - 1&                                          ' Set ceiling to current position - 1
        base = lbA                                                ' Set base to lower bound
        Do While StrComp(sA(ceil), Item, mMethod) = eComp   '  .  ' While current item must move down
            midd = (base + ceil) \ 2&                             ' Find mid point
            Do Until StrComp(sA(midd), Item, mMethod) = eComp     ' Step back up if equal or below
                base = midd + 1&                                  ' Bring up the base
                midd = (base + ceil) \ 2&                         ' Find mid point
                If midd = ceil Then Exit Do                       ' If we're up to ceiling
            Loop                                                  ' Out of loop > target pos
            Find = midd                                           ' Set provisional to new ceiling
            If Find = base Then Exit Do                           ' If we're down to base
            ceil = midd - 1&                                      ' Bring down the ceiling
        Loop '-Twister v4 ©Rd-     .      . ...  .             .  ' Out of stable binary search loops
        If (Find < walk) Then                                     ' If current item needs to move down
            CopyMemByV lpStr, Sum(lp, Find * 4&), 4&
            run = walk + 1&
            Do Until run > mezz Or run - walk > optimal           ' Runner do loop
                If Not (StrComp(Item, sA(run), mMethod) = eComp) Then Exit Do
                run = run + 1&
            Loop: cast = (run - walk)
            CopyMemByV lpB, Sum(lp, walk * 4&), cast * 4&         ' Grab current value(s)
            CopyMemByV Sum(lp, (Find + cast) * 4&), Sum(lp, Find * 4&), (walk - Find) * 4& ' Move up items
            CopyMemByV Sum(lp, Find * 4&), lpB, cast * 4&         ' Re-assign current value(s) into found pos
            If cast > 1& Then
                If Not run > mezz Then
                    idx = idx + 1&
                    StackLB(idx) = run - 1&  ' Will increment back
                    StackUB(idx) = mezz
                End If
                walk = Find
                mezz = Find + cast - 1&
        End If: End If
        If walk = mezz Then
            If idx Then
                walk = StackLB(idx)
                mezz = StackUB(idx)
                idx = idx - 1&
    End If: End If: Loop           ' Out of walker do loop
    CopyMemByR ByVal lpStr, 0&, 4& ' De-reference pointer to item variable
    ' ----=================----
End Sub
